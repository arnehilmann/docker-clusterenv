#!/usr/bin/env python
"""
Usage:
    start-machine [<hostname>] [--mount-dir=<directive>...] [--link-files=<fileglob>:<path>...] [--port=MAPPING...] [--post-init-machine=<file>] [--interactive|--daemon|<cmd>...]
"""

import collections
import json
import os
import subprocess
import sys

def flatten(l):
    for el in l:
        if isinstance(el, collections.Iterable) and not isinstance(el, basestring):
            for sub in flatten(el):
                yield sub
        else:
            yield el

from docopt import docopt
arguments = docopt(__doc__)

print "starting a docker-clusterenv machine"

DOCKER_IMAGE = "clusterenv/base"

OUT_DIR = "out"
LOCAL_DOCKER_CLUSTERENV_DIR = "/docker-clusterenv"
LOCAL_DIR = "/local-fs"
LOCAL_DNSMASQ_DIR = "/etc/dnsmasq.d/"
LOCAL_OUT_DIR = os.path.join(LOCAL_DIR, OUT_DIR)

DNSMASQ_DIR = os.path.abspath(os.path.join(OUT_DIR, "etc", "dnsmasq.d"))


print "-- initializing environment"

print "---- checking for needed directories"
if not os.path.exists(OUT_DIR):
    os.makedirs(OUT_DIR)

if not os.path.exists(DNSMASQ_DIR):
    os.makedirs(DNSMASQ_DIR)

print "-- determining pathes and file names"
docker_clusterenv_dir = os.path.abspath(os.path.dirname(sys.argv[0]))
print "---- docker-clusterenv home: %s" % docker_clusterenv_dir

init_machine = LOCAL_DOCKER_CLUSTERENV_DIR + "/init-machine"

print "-- parsing mount directives"
mount_directives = [["-v",os.path.join(os.getcwd(), md)]
        for md in arguments["--mount-dir"]]
mount_directives.append(["-v", "%s:%s:ro" % (docker_clusterenv_dir, LOCAL_DOCKER_CLUSTERENV_DIR)])
mount_directives.append(["-v", "%s:%s:rw" % (DNSMASQ_DIR, LOCAL_DNSMASQ_DIR)])
mount_directives.append(["-v", "%s:%s:rw" % (os.getcwd(), LOCAL_DIR)])

port_directives = [["-p", pd] for pd in arguments["--port"]]

hostname = arguments["<hostname>"]

print "-- checking arguments for machine post-startup"
pass_thru = ["%s=%s" % (pass_thru, param)
    for pass_thru in ["--link-files"]
    for param in arguments[pass_thru]
]
post_init_machine = arguments["--post-init-machine"]
if post_init_machine:
    post_init_machine = os.path.join(LOCAL_DIR, post_init_machine)
    pass_thru.append("--post-init-machine=%s" % post_init_machine)

if arguments["--interactive"]:
    print "-- interactive mode enabled"
    action_mode = ["-i", "-t"]
    script = "--cmd=/bin/bash -i"
elif arguments["<cmd>"]:
    print "-- direct-command mode enabled"
    action_mode = ["-i", "-t"]
    script = "--cmd=%s" % " ".join(arguments["<cmd>"])
else:
    print "-- daemon mode enabled"
    action_mode = "-d"
    script = "--cmd=/usr/sbin/sshd -D"

print "-- checking for non-running container named '%s'" % hostname
with open(os.devnull, "w") as fnull:
    output = subprocess.Popen(["docker", "inspect", hostname], stdout=subprocess.PIPE, stderr=fnull).communicate()[0]
    container_status = json.loads(output)
    if container_status:
        running = container_status[0]["State"]["Running"]
        if running:
            print "---- container '%s' seems to be running already" % hostname
        else:
            print "---- stopped container '%s' found, removing it now" % hostname
            subprocess.call(["docker", "rm", hostname], stdout=fnull)

print "-- docker command to be executed:"
hostname_arg = ["-h", hostname, "-name", hostname] if hostname else []
cmd = [
    "docker", "run", action_mode, hostname_arg,
    mount_directives,
    "-dns", "127.0.0.1",
    "-w", LOCAL_DIR,
    port_directives,
    DOCKER_IMAGE, init_machine,
    pass_thru,
    script
]

cmd = list(flatten(cmd))
print "---- %s" % " ".join(cmd)
print "-" * 40
exit_code = subprocess.call(cmd)

print "-- exit code %s" % exit_code
sys.exit(exit_code)
